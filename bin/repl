#!/usr/bin/env ruby

require 'colorize'

# repl(1) -- sometimes you need a repl
#
# repl is an interactive program which tenderly wraps another,
# non-interactive program.
#
# For example:
#
#   $ repl redis-cli
#   >> set name chris
#   OK
#   >> get name
#   chris
#
# If you have rlwrap(1) installed you'll get the full benefits of
# readline: history, reverse searches, etc.

def show_help
  puts <<-help
Usage: repl [options] command ...

Options:
  --help        Display this message
  --stdin       Pipe input to command's STDIN
  --post-pipe   Pipe the result of each command into this pipeline
  --debug       Display each command executed
  --man         Display the man page

Bug reports, suggestions, updates:
http://github.com/defunkt/repl/issues
help
  exit
end

if ARGV.empty? || ARGV.any? { |arg| %w( -h --help -help help ).include?(arg) }
  show_help
end

if ARGV.include? '--man'
  dir = File.dirname(__FILE__)
  exec "man #{dir}/../man/repl.1"
end

completion_dir = ENV['REPL_COMPLETION_DIR'] || "~/.repl"
if File.exists?(cdir = File.expand_path(completion_dir))
  script = ARGV.detect { |a| a !~ /^-/ }
  if script
    cfile = Dir[cdir + '/' + File.basename(script)].first
    cfile = nil if cfile && !File.exists?(cfile)
  end
end

history_dir = ENV['REPL_HISTORY_DIR'] || "~/"
if File.exists?(hdir = File.expand_path(history_dir))
  if script = ARGV.detect { |a| a !~ /^-/ }
    script = File.basename(script)
    hfile = "#{hdir}/.#{script}_history"
  end
end

if !ENV['__REPL_WRAPPED'] && system("which rlwrap > /dev/null 2> /dev/null")
  ENV['__REPL_WRAPPED'] = '0'

  rlargs = ""
  rlargs << " --complete-filenames"
  rlargs << " --ansi-colour-aware"
  rlargs << " --history-no-dupes=2"
  rlargs << " --multi-line"
  rlargs << " --break-chars=\"\""
  rlargs << " -f #{cfile}" if cfile
  rlargs << " -H #{hfile}" if hfile

  title = ENV['REPL_TITLE'] || ARGV[0]
  puts "bash -c \"printf '\033k#{title}\033\\'; rlwrap #{rlargs} #$0 #{ARGV.join(' ')}\"" if ARGV.include? '--debug'
  exec "bash -c \"printf '\033k#{title}\033\\'; rlwrap #{rlargs} #$0 #{ARGV.join(' ')}\""
end

if ARGV.include? '--post-pipe'
  post_pipe = ARGV[(ARGV.index '--post-pipe') + 1]
  ARGV.delete('--post-pipe')
  ARGV.delete(post_pipe)
end

if ARGV.include? '--debug'
  debug = ARGV.delete('--debug')
end

if ARGV.include? '--stdin'
  from_stdin = ARGV.delete('--stdin')
end


command = ARGV.join(' ')
show_help if command.empty?

if debug
  print 'rlwrap ' if ENV['__REPL_WRAPPED']
  print "-f #{cfile} " if cfile
  print "-H #{hfile} " if hfile
  puts command.inspect
end

result = nil
loop do
  if not result.nil?
    print (result ? "✔ ".green : "✘ ".red )
  end
  if ENV['REPL_PROMPT']
    system(ENV['REPL_PROMPT'])
    print " "
  else
    print "#{ARGV[0]}>> "
  end

  begin
    line = $stdin.gets.chomp
  rescue NoMethodError, Interrupt
    exit
  end

  if post_pipe
    if from_stdin
      run = "echo \"%s\" | #{command} | %s" % [ line, post_pipe, nil ]
    else
      run = "#{command} %s | %s" % [ line, post_pipe, nil ]
    end
  else
    if from_stdin
      run = "echo \"%s\" | #{command}" % [ line, nil ]
    else
      run = "#{command} %s" % [ line, nil ]
    end
  end
  puts "$ #{run}" if debug
  result = system "bash -c 'set -o pipefail; #{run}'"
  warn "Use Ctrl-D (i.e. EOF) to exit" if line =~ /^(exit|quit)$/
end
