#!/usr/bin/env ruby

# frozen_string_literal: true

require 'colorize'
require 'awesome_print'

# repl(1) -- sometimes you need a repl
#
# repl is an interactive program which tenderly wraps another,
# non-interactive program.
#
# For example:
#
#   $ repl redis-cli
#   >> set name chris
#   OK
#   >> get name
#   chris
#
# If you have rlwrap(1) installed you'll get the full benefits of
# readline: history, reverse searches, etc.

# rubocop:disable Layout/IndentHeredoc
def show_help
  puts <<~HELP
  Usage: repl [options] -- command ...

  Options:
    --help          Display this message
    --stdin         Pipe input to command's STDIN
    --post-command  Append this text to the command before execution
    --pager         Append this after the post command (default less -RNMJF)
    --debug         Display each command executed
    --man           Display the man page

  NOTE: The -- are required to handle cases where repl's option flags match the
  commands option flags. repl will only read commands up to the first --. If --
  is not present then it is assumed that the options apply to the command

  HELP
end
# rubocop:enable Layout/IndentHeredoc

helps = ['-h', '--help', '-help', 'help']
if ARGV.empty? || ARGV.any? { |a| helps.include? a }
  show_help
  exit
end

if ARGV.include? '--man'
  dir = File.dirname(__FILE__)
  exec "man #{dir}/../man/repl.1"
end

completion_dir = ENV['REPL_COMPLETION_DIR'] || '~/.repl'
if ARGV.find_index '--'
  script = ARGV[ARGV.find_index('--')..-1].detect { |a| a !~ /^-/ }
  if File.exist?(cdir = File.expand_path(completion_dir))
    if script
      cfile = Dir[cdir + '/' + File.basename(script)].first
      cfile = nil if cfile && !File.exist?(cfile)
    end
  end

  history_dir = ENV['REPL_HISTORY_DIR'] || '~/'
  if File.exist?(hdir = File.expand_path(history_dir))
    if script
      hfile = "#{hdir}/.#{File.basename(script)}_history"
    end
  end
end

if !ENV['__REPL_WRAPPED'] && system('which rlwrap > /dev/null 2> /dev/null')
  ENV['__REPL_WRAPPED'] = '0'

  rlargs = ''
  rlargs += ' --complete-filenames'
  rlargs += ' --ansi-colour-aware'
  rlargs += ' --history-no-dupes=2'
  rlargs += ' --multi-line'
  rlargs += ' --break-chars=""'
  # needed because we use filters + multiline strings
  rlargs += ' --no-warnings'
  rlargs += " --file=#{cfile}" if cfile
  rlargs += " --history-file=#{hfile}" if hfile
  rlargs += ' --filter=pipeto'

  dashdash = ARGV.find_index '--'
  if dashdash.nil?
    show_help
    exit 1
  end
  replargs = ARGV[0..(dashdash - 1)] if dashdash.positive?
  commandargs = ARGV[(dashdash + 1)..-1]

  ENV['__REPL_PAGER'] = 'less -RNMJF'
  unless replargs.nil?
    if replargs.include? '--post-command'
      # rubocop:disable Metrics/LineLength
      ENV['__REPL_POST_COMMAND'] = replargs[(replargs.index '--post-command') + 1]
      # rubocop:enable Metrics/LineLength
    end
    if replargs.include? '--pager'
      ENV['__REPL_PAGER'] = replargs[(replargs.index '--pager') + 1]
    end
    ENV['__REPL_DEBUG'] = '1' unless replargs.delete('--debug').nil?
    ENV['__REPL_STDIN'] = '1' unless replargs.delete('--stdin').nil?
  end

  title = ENV['REPL_TITLE'] || commandargs[0]
  args = commandargs.map { |a| "\"#{a}\"" }.join ' '
  # rubocop:disable Metrics/LineLength
  command = "bash -c \"printf '\033k#{title}\033\\'; rlwrap #{rlargs} #{$PROGRAM_NAME} #{args}\""
  # rubocop:enable Metrics/LineLength
  puts command if ENV['__REPL_DEBUG']
  exec command
end

command = ARGV.join(' ').strip
if command.empty?
  show_help
  exit
end

if ENV['__REPL_DEBUG']
  print 'rlwrap ' if ENV['__REPL_WRAPPED']
  print "-f #{cfile} " if cfile
  print "-H #{hfile} " if hfile
  puts command.inspect
end

result = nil
loop do
  # rubocop:disable Layout/SpaceInsideParens
  # rubocop:disable Lint/ParenthesesAsGroupedExpression
  print ( result ? '✔ '.green : '✘ '.red ) unless result.nil?
  # rubocop:enable Lint/ParenthesesAsGroupedExpression
  # rubocop:enable Layout/SpaceInsideParens
  if ENV['REPL_PROMPT']
    system(ENV['REPL_PROMPT'] + ';')
    print ' '
  else
    print "#{ARGV[0]}>> "
  end

  begin
    line = $stdin.gets.chomp
  rescue NoMethodError, Interrupt
    exit
  end

  next if line.strip.empty?
  # remove leading command (just the command itself, not any arguments) if it is there
  line.slice!(/^ *#{command.split.first} */)

  # rubocop:disable Style/ConditionalAssignment
  if ENV['__REPL_STDIN']
    run = "echo \"#{line}\" | #{command}"
  else
    run = "#{command} #{line}"
  end
  # rubocop:enable Style/ConditionalAssignment
  run = "#{run} #{ENV['__REPL_POST_COMMAND']}" if ENV['__REPL_POST_COMMAND']
  # use bash quotes to handle single quotes inside double quotes.
  # doesn't work when single quotes aren't inside double quoted strings. sigh
  run = run.gsub(/'/, '\'"\'"\'')
  # rubocop:disable Metrics/LineLength
  puts "bash -c 'set -o pipefail; #{run} | #{ENV['__REPL_PAGER']}'" if ENV['__REPL_DEBUG']
  # rubocop:enable Metrics/LineLength
  # pipe to less with
  # -N Numbers
  # -M More output
  # -J status
  # -R raw ansi colors
  # -F quit if it can all be displayed on a single screen
  result = system "bash -c 'set -o pipefail; #{run} | #{ENV['__REPL_PAGER']}'"
  warn 'Use Ctrl-D (i.e. EOF) to exit' if line =~ /^(exit|quit)$/
end
